---
name: cacti-monitoring

services:
  #  A single Cacti container
  #
  # see:
  #   - https://hub.docker.com/r/smcline06/cacti
  #   - https://github.com/scline/docker-cacti/blob/master/docker-compose/README.md
  #   - https://github.com/scline/docker-cacti/blob/master/README.md
  cacti:
    image: smcline06/cacti:1.2.17
    container_name: cacti
    hostname: cacti
    restart: unless-stopped
    depends_on:
      - db
    environment:
      DB_HOST: db
      DB_NAME: cacti
      DB_USER: cacti
      DB_PASS: ${DB_CACTI_PASSWORD}
      DB_ROOT_PASS: ${DB_ROOT_PASSWORD}
      INITIALIZE_DB: 1
      TZ: Pacific/Auckland
    ports:
      - "80:80"
    volumes:
      - /srv/cacti-data:/cacti
      - /srv/cacti-spine:/spine
      - /srv/cacti-backups:/backups


  #  Standard mariadb (mysql) - use the long term support version
  #
  # see:
  # - https://hub.docker.com/_/mariadb
  db:
    image: mariadb:lts
    container_name: db
    restart: always
    hostname: cacti-db
    environment:
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MARIADB_USER: cacti
      MARIADB_PASSWORD: ${DB_CACTI_PASSWORD}
      MARIADB_DATABASE: cacti
      TZ: Pacific/Auckland
    ports:
      - "3306:3306"
    volumes:
      - /srv/db:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mariadb-admin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}" ]
      interval: 30s
      timeout: 10s
      retries: 5    # How many consecutive failures before marking as unhealthy
      start_period: 30s # Grace period for the container to start before health checks begin
    command:
      # Note: the database device is on a ZFS ZVOL, so double write is off
      - mariadbd
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --max_connections=200
      - --max_heap_table_size=128M
      - --max_allowed_packet=32M
      - --tmp_table_size=128M
      - --join_buffer_size=128M
      - --innodb=FORCE
      - --default-storage-engine=InnoDB
      - --innodb_buffer_pool_size=1G
      - --innodb_doublewrite=OFF
      - --innodb_flush_log_at_timeout=3
      - --innodb_read_io_threads=32
      - --innodb_write_io_threads=16
      - --innodb_buffer_pool_instances=9
      - --innodb_file_format=Barracuda
      - --innodb_large_prefix=1
      - --innodb_io_capacity=5000
      - --innodb_io_capacity_max=10000

  # Run the cacti backup as a cron job
  #
  # see:
  #  - https://hub.docker.com/r/hectorm/supercronic
  #  - https://github.com/aptible/supercronic
  #  - https://github.com/hectorm/docker-supercronic
  cron_job_runner:
    image: hectorm/supercronic:latest
    container_name: cron
    restart: unless-stopped
    depends_on:
      - cacti # the backup is an exec on the cacti container, so it must be running
    group_add:
      - 233 # add the docker group so that the container uid (1000) can exec docker
    volumes:
      - /usr/bin/docker:/usr/bin/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock # Mount Docker socket for docker exec
      - /srv/crontab:/etc/crontab
    command:  -passthrough-logs /etc/crontab
